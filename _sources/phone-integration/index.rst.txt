
Интеграция с телефонией
========================


Описание интеграции
--------------------
API Контур.CRM позволяет подключить прямую интеграцию с телефонией. В интеграции реализуются сценарии использования: входящий и исходящий вызов, пауза, перевод, и другие. Система видит звонок набором связанных между собой плеч, где каждое плечо это разговор между двумя конкретными участниками. Звонки бывают трех типов:

* Входящий — клиент звонит на внешний номер;
* Исходящий — пользователь звонит на внешний номер;
* Внутренний — пользователь звонит пользователю на внутренний номер.

Пример звонка
~~~~~~~~~~~~~~

Иван делает звонок по внешнему номеру. Телефония переводит звонок клиента на менеджера Машу. Маша разговаривает с Иваном, потом делает консультационный звонок по внутреннему номеру эксперту Диме. После решения вопроса Маша возвращается к Ивану и заканчивает с ним разговор. В таком звонке два плеча: разговор клиента с менеджером и разговор менеджера с экспертом.

.. image:: /_static/example-call.png

.. _rst-markup-CreateIntegration:

Создание интеграции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Интеграции бывают двух типов:

* Приватная интеграция — создается администратором и доступна только сотрудникам приглашенным в это пространство.
* Публичная интеграция — создается администратором и доступна пользователям всех пространств. Если интеграция установлена, то напишите на почту, чтобы сделать ее публичной: crm-support@kontur.ru. После включения сторонние организации добавят ее в разделе «Настройки» —> «Интеграции» —> «Добавить интеграцию». 

.. image:: /_static/settings-admin.png

Создание приватной интеграции
------------------------------

Вход в настройки
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Перейдите по ссылке: https://crm.kontur.ru и авторизуйтесь. Система автоматически подставит название пространства на латинице.
#. Если пространств несколько, то выберите нужное из списка: https://crm.kontur.ru/workspaces. Если одно — пропустите этот пункт.
#. Измените адрес в строке браузера и перейдите по ссылке: https://crm.kontur.ru/api/имя_пространства/private-integrations; где:

    #. «имя_пространства» — уникальное название для организации в Контур.CRM;
    #. вместо «app» – «api»;
    #. вместо «main» – «private-integrations». 

#. После отобразится строка «Authorization» и Bearer-токен. Наличие заполненного Bearer-токена означает, что авторизационная информация передана.

.. image:: /_static/authorization-private-integrations.png


Установка интеграции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Создайте manifest.json файл. В нем нужно указать информацию об интеграции:
 
   #. Название интеграции;
   #. Версию интеграции;
   #. Веб-адрес. Пример см. ниже.

#. Создайте zip-архив с вложенным manifest.json файлом.
#. Нажмите кнопку «Выберите файл» и загрузите zip-архив в интеграцию. 
#. Нажмите на кнопку «Install». Интеграция установится в пространство, кнопка «Install» поменяется на «Uninstall».

.. image:: /_static/authorization-private-integrations.png

Если интеграцию нужно изменить:

#. Нажмите кнопку «Выберите файл» и загрузите zip-архив с измененным файлом в интеграцию. 
#. Переустановите интеграцию в пространство — нажмите «Uninstall» и затем снова «Install».

**Пример**
:: 

      {
      "name": "my_workspace.myIntegration2020",
      "version": "1.0",
      "baseUrl": "https://my-integration.ru"
      }

Создание публичной интеграции
------------------------------

Вход в настройки
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Перейдите по ссылке: https://crm.kontur.ru и авторизуйтесь. Система автоматически подставит название пространства на латинице.
#. Если пространств несколько, то выберите нужное из списка: https://crm.kontur.ru/workspaces. Если одно — пропустите этот пункт.
#. Измените адрес в строке браузера и перейдите по ссылке: https://crm.kontur.ru/api/имя_пространства/integrations; где:

    #. «имя_пространства» — уникальное название для организации в Контур.CRM;
    #. вместо «app» – «api»;
    #. вместо «main» – «integrations». 

#. После отобразятся публичные интеграции. Появление списка публичных интеграций означает, что авторизационная информация передана.

.. image:: /_static/login-settings-integrations.png

Создание интеграции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Введите уникальное имя интеграции. Разрешены большие и маленькие латинские символы, цифры, точка и знак подчеркивания, название должно начинаться с латинской буквы. Пример: my_workspace.myIntegration2020.
#. Введите версию интеграции, в соответствии с форматом: major.minor.patch.build-prerelease. Части major и minor обязательные. Пример версии интеграции: 1.0; 1.0.1; 0.0.1.146; 1.12-pre2020; 1.2.3-alpha; 100.1.3.256-beta40.
#. Нажмите "Create". Интеграция будет создана и появится в списке.

.. image:: /_static/create-public-integrations.png
 

Установка интеграции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Нажмите на кнопку «Install». Интеграция установится в пространство, кнопка «Install» поменяется на «Uninstall».
#. Нажмите на кнопку «Setup» и введите параметры интеграции. Подробнее про активацию в разделе: Активация интеграции.
#. Чтобы установленная интеграция стала публичной, напишите нам на почту: crm-support@kontur.ru. После включения сторонние организации смогут добавить ее в разделе: «Настройки» —> «Интеграции» —> «Добавить интеграцию». 

.. image:: /_static/setup-public-integrations.png

Интеграцию можно изменить двумя способами:

#. Выполнить запрос PATCH Integration Instances указав патч объекта. Подробнее в разделе: :ref:`Включение системных вызовов<rst-markup-integrationsinstances>`.
#. Нажать на кнопку «Setup» и ввести параметры интеграции. Подробнее про активацию в разделе: :ref:`Активация интеграции<rst-markup-integrationsetup>`.

**Пример**
:: 

{"autoRedirect":true,"autoAnswer":true}

Особенности интеграции
-----------------------

Подключить телефонию можно без создания собственной интеграции, если она добавлена в магазин интеграций. Если такой вариант не подходит, то :ref:`создайте публичную или приватную интеграцию<rst-markup-createintegration>`, в зависимости от нужд организации. 

Чтобы подключить телефонию в Контур.CRM, установите интеграцию в пространстве. Интеграции выдается API-ключ, с помощью которого вы сможете авторизовать вызовы в API. В пространстве можно подключить неограниченное количество интеграций.

При создании интеграции, вам необходимо реализовать следующую функциональность:

* Регистрацию завершенных звонков и чтение истории из телефонии. Завершенный звонок это состоявшийся или пропущенный вызов. 
* Сообщение о событиях: поступление вызова, подняли трубку, положили трубку, поставили на удержание, и другие. При вызове Контур.CRM отобразит в интерфейсе пространства кнопки «Принять звонок» и «Положить трубку».
* HTTP-сервер для обработки системных вызовов.

    #. Системный вызов CALL — интеграция начинает новый звонок. Контур.CRM выполнит его, когда пользователь нажимает кнопку «Позвонить» в интерфейсе.
    #. Системный вызов HANGUP — интеграция завершает плечо звонка. Вызов делает Контур.CRM, когда пользователь нажимает на кнопку «Положить трубку» в интерфейсе.

* Переадресацию звонка на ответственного пользователя, при необходимости в таком сценарии. Пользователь может создать карточку «Cделки» и указать в ней номер клиента. При поступлении входящего вызова звонок будет адресован ответственному сотруднику в активной сделке.

Чтобы избежать дублирования звонков в системе, интеграция должна сопоставлять звонок с помощью внутреннего идентификатора телефонии. Если звонки поступают по внутренним номерам, то в плечах модели звонка будут записаны идентификаторы пользователей. Интеграция должна обеспечить сохранение соответствия «Пользователь Контур.CRM» <—> «Внутренний номер в телефонии». Записи разговора могут храниться в плечах звонка. Для сохранения записи нужно загрузить ее во временное хранилище с помощью :ref:`API Files<rst-markup-uploadfile>`

Алгоритм работы с методами
---------------------------

Рассмотрим сценарии входящих и исходящих звонков API Контур.CRM. Порядок методов зависит от интеграции и особенностей от телефонии.

**Пример входящего звонка**

#. Если в интеграции включена переадресация звонка, то при активной карточке сделки вызов будет адресован ответственному сотруднику :ref:`GET TelephonyCallRedirect<rst-markup-telephonycallredirect>`
#. Интеграция сообщает о начале звонка :ref:`POST TelephonyCallStarted<rst-markup-telephonycallstarted>` и событии звонка :ref:`POST TelephonyCallEvent<rst-markup-telephonycallevent>`.
#. При неудачной попытке позвонить, интеграция отправляет сообщение :ref:`POST TelephonyCallFailed<rst-markup-telephonycallfailed>`.
#. Пользователь решает завершить звонок и нажимает в интерфейсе «Положить трубку». Контур.CRM отправит запрос на HTTP-сервер указанный в интеграции :ref:`POST CommunicationsHangup<rst-markup-communicationshangup>`.
#. Интеграция сообщает о завершении звонка между участниками :ref:`POST TelephonyCallFinished<rst-markup-telephonycallfinished>`.
#. Интеграция регистрирует завершенный звонок :ref:`POST TelephonyRegisterCall<rst-markup-telephonyregistercall>` и загружает файл во временное хранилище API Files :ref:`POST UploadFile<rst-markup-uploadfile>`.
#. Интеграция сообщает о появлении записи разговора :ref:`POST TelephonyCallRecording<rst-markup-telephonycallrecording>`
#. Запись звонка доступна для прослушивания в Контур.CRM.

**Пример исходящего звонка**

#. Пользователь нажимает «Позвонить» в интерфейсе. Контур.CRM отправит запрос на HTTP-сервер указанный в интеграции :ref:`POST СommunicationsСall<rst-markup-СommunicationsСall>`.
#. Интеграция сообщает о начале звонка :ref:`POST TelephonyCallStarted<rst-markup-telephonycallstarted>` и событии звонка :ref:`POST TelephonyCallEvent<rst-markup-TelephonyCallEvent>`.
#. При неудачной попытке позвонить, интеграция отправляет сообщение :ref:`POST TelephonyCallFailed<rst-markup-telephonycallfailed>`.
#. Пользователь решает завершить звонок и нажимает в интерфейсе «Положить трубку». Контур.CRM отправит запрос на HTTP-сервер указанный в интеграции :ref:`POST CommunicationsHangup<rst-markup-communicationshangup>`.
#. Интеграция сообщает о завершении звонка между участниками :ref:`POST TelephonyCallFinished<rst-markup-telephonycallfinished>`.
#. Интеграция регистрирует завершенный звонок :ref:`POST TelephonyRegisterCall<rst-markup-telephonyregistercall>` и загружает файл во временное хранилище API Files :ref:`POST UploadFile<rst-markup-uploadfile>`.
#. Интеграция сообщает о появлении записи разговора :ref:`POST TelephonyCallRecording<rst-markup-telephonycallrecording>`
#. Запись звонка доступна для прослушивания в Контур.CRM.
